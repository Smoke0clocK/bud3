'use client';

import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { Telegraf, Context } from 'telegraf';
import { PrismaService } from '../services/prisma.service';
import { ConfigService } from '@nestjs/config';
import { Message } from 'telegraf/typings/core/types/typegram';
import { MessageBrokerService } from '../services/message-broker.service';
import axios from 'axios';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: Telegraf;
  private logger = new Logger('TelegramService');

  constructor(
    private prisma: PrismaService,
    private config: ConfigService,
    private broker: MessageBrokerService,
  ) {
    this.bot = new Telegraf(this.config.get('TELEGRAM_TOKEN'));
  }

  async onModuleInit() {
    try {
      this.logger.log('Initializing Telegram bot...');
      
      this.bot.on(['text', 'sticker', 'animation', 'photo', 'video', 'document'], (ctx) => this.handleMessage(ctx));
      
      this.broker.subscribe(async (message) => {
        if (message.platform === 'discord') {
          await this.handleDiscordMessage(message);
        }
      });

      await this.bot.launch();
      this.logger.log('Telegram bot is online!');

      process.once('SIGINT', () => this.bot.stop('SIGINT'));
      process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
    } catch (error) {
      this.logger.error('Failed to start Telegram bot:', error);
    }
  }

  private async handleDiscordMessage(message: any) {
    try {
      const pair = await this.getChannelPair(message);
      if (!pair) return;

      // Create options for sending message
      const options: any = {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      };

      // If message is a reply, handle reply references
      if (message.replyToId) {
        const repliedMessage = await this.prisma.message.findFirst({
          where: {
            platformId: message.replyToId,
            platform: 'telegram'
          }
        });
        if (repliedMessage) {
          options.reply_to_message_id = parseInt(repliedMessage.platformId);
        }
      }

      // If there's an avatar URL, download and use it
      let photoBuffer;
      if (message.authorAvatar) {
        try {
          const avatarResponse = await axios.get(message.authorAvatar, { responseType: 'arraybuffer' });
          photoBuffer = Buffer.from(avatarResponse.data);
        } catch (error) {
          this.logger.error('Failed to fetch avatar:', error);
        }
      }

      // Format the message with proper display name
      const formattedContent = `<b>${message.authorName}</b>: ${message.content}`;

      if (message.attachments) {
        await this.handleDiscordMedia(
          pair.telegramChannel.channelId,
          formattedContent,
          message.attachments,
          options,
          photoBuffer
        );
      } else {
        await this.bot.telegram.sendMessage(
          pair.telegramChannel.channelId,
          formattedContent,
          options
        );
      }
    } catch (error) {
      this.logger.error('Failed to handle Discord message:', error);
    }
  }

  private async handleDiscordMedia(chatId: string, content: string, attachments: string, options: any, avatarBuffer?: Buffer) {
    try {
      const attachment = JSON.parse(attachments);
      
      const response = await axios.get(attachment.url, { responseType: 'arraybuffer' });
      const buffer = Buffer.from(response.data);

      const mediaOptions = {
        ...options,
        caption: content,
      };

      if (attachment.isSticker) {
        if (attachment.isAnimated) {
          await this.bot.telegram.sendAnimation(chatId, { source: buffer }, mediaOptions);
        } else {
          await this.bot.telegram.sendSticker(chatId, { source: buffer });
          // Send caption as separate message since stickers can't have captions
          await this.bot.telegram.sendMessage(chatId, content, options);
        }
      } else if (attachment.contentType?.startsWith('image/gif')) {
        await this.bot.telegram.sendAnimation(chatId, { source: buffer }, mediaOptions);
      } else if (attachment.contentType?.startsWith('image/')) {
        await this.bot.telegram.sendPhoto(chatId, { source: buffer }, mediaOptions);
      } else if (attachment.contentType?.startsWith('video/')) {
        await this.bot.telegram.sendVideo(chatId, { source: buffer }, mediaOptions);
      } else {
        await this.bot.telegram.sendDocument(
          chatId,
          { source: buffer, filename: attachment.name || 'file' },
          mediaOptions
        );
      }
    } catch (error) {
      this.logger.error('Failed to handle Discord media:', error);
    }
  }

  private async handleMessage(ctx: Context) {
    try {
      if (!ctx.message) return;

      let content = '';
      let attachments = null;

      // Handle different message types
      if ('text' in ctx.message) {
        content = ctx.message.text;
      } else if ('sticker' in ctx.message) {
        const fileUrl = await this.bot.telegram.getFileLink(ctx.message.sticker.file_id);
        content = ctx.message.sticker.emoji || '[Sticker]';
        attachments = JSON.stringify({
          url: fileUrl.href,
          contentType: 'image/webp',
          isSticker: true,
          isAnimated: ctx.message.sticker.is_animated
        });
      } else if ('animation' in ctx.message) {
        const fileUrl = await this.bot.telegram.getFileLink(ctx.message.animation.file_id);
        content = ctx.message.caption || '[GIF]';
        attachments = JSON.stringify({
          url: fileUrl.href,
          contentType: 'image/gif',
          name: ctx.message.animation.file_name
        });
      } else if ('photo' in ctx.message) {
        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        const fileUrl = await this.bot.telegram.getFileLink(photo.file_id);
        content = ctx.message.caption || '';
        attachments = JSON.stringify({
          url: fileUrl.href,
          contentType: 'image/jpeg'
        });
      } else if ('video' in ctx.message) {
        const fileUrl = await this.bot.telegram.getFileLink(ctx.message.video.file_id);
        content = ctx.message.caption || '';
        attachments = JSON.stringify({
          url: fileUrl.href,
          contentType: 'video/mp4',
          name: ctx.message.video.file_name
        });
      }

      const channel = await this.prisma.channel.findUnique({
        where: {
          platform_channelId: {
            platform: 'telegram',
            channelId: ctx.chat.id.toString(),
          },
        },
      });

      if (!channel) return;

      const authorName = ctx.from.username || ctx.from.first_name || 'Unknown';

      // Store message
      await this.prisma.message.create({
        data: {
          platform: 'telegram',
          platformId: ctx.message.message_id.toString(),
          content,
          channelId: channel.id,
          authorId: ctx.from.id.toString(),
          authorName,
          threadId: null,
          replyToId: ('reply_to_message' in ctx.message) ? 
            ctx.message.reply_to_message?.message_id?.toString() : null,
          attachments
        }
      });

      // Publish to broker
      this.broker.publish({
        content,
        platform: 'telegram',
        channelId: ctx.chat.id.toString(),
        authorName,
        attachments,
        replyToId: ('reply_to_message' in ctx.message) ? 
          ctx.message.reply_to_message?.message_id?.toString() : null
      });
    } catch (error) {
      this.logger.error('Error handling Telegram message:', error);
    }
  }

  private async getChannelPair(message: any) {
    const discordChannel = await this.prisma.channel.findFirst({
      where: { platform: 'discord', channelId: message.channelId }
    });
    
    if (!discordChannel) return null;

    const telegramChannel = await this.prisma.channel.findFirst({
      where: { platform: 'telegram', bridgeId: discordChannel.bridgeId }
    });

    return telegramChannel ? { discordChannel, telegramChannel } : null;
  }
}
